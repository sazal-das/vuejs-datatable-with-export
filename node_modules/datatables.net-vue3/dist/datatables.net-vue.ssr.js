'use strict';var vue=require('vue');function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = it.call(o);
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}var DataTablesLib;
var Comp = vue.defineComponent({
  name: 'DataTable',
  expose: ['dt'],
  data: function data() {
    return {
      _dt: null,
      oldData: []
    };
  },
  computed: {},
  methods: {
    dt: function dt() {
      return this._dt;
    },
    saveOld: function saveOld(d) {
      this.oldData = d.value ? d.value.slice() : d.slice();
    }
  },
  mounted: function mounted() {
    // Component shown so we can initialise DataTables of the table now
    var table = this.$el.querySelector('table');
    var options = this.options;

    if (this.data) {
      options.data = this.data;
      this.saveOld(options.data);
    }

    if (this.columns) {
      options.columns = this.columns;
    }

    if (this.ajax) {
      options.ajax = this.ajax;
    }

    if (!DataTablesLib) {
      throw new Error('DataTables library not set. See https://datatables.net/tn/19 for details.');
    }

    this._dt = new DataTablesLib(table, options);
  },
  beforeUnmount: function beforeUnmount() {
    this._dt.destroy(true);
  },
  props: {
    ajax: null,
    class: {
      type: String,
      default: ''
    },
    columns: {
      type: Array,
      default: null
    },
    data: {
      type: Array,
      default: null
    },
    options: {
      default: {}
    }
  },
  watch: {
    data: {
      handler: function handler(newVal) {
        var _this = this;

        var known = this._dt.data().toArray(); // Find any new rows


        var _iterator = _createForOfIteratorHelper(newVal),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var n = _step.value;

            if (!known.includes(n)) {
              this._dt.row.add(n);
            }
          } // Remove any old rows

        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(known),
            _step2;

        try {
          var _loop = function _loop() {
            var k = _step2.value;

            if (!newVal.includes(k)) {
              _this._dt.row(function (_idx, d) {
                return d === k;
              }).remove();
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop();
          } // Data in other rows might have changes, so we need to invalidate the rows

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._dt.rows().invalidate().draw(false);

        this.saveOld(newVal);
      },
      deep: true
    }
  }
}); // Expose a static method that can be used to add extensions

Comp.use = function (lib) {
  DataTablesLib = lib;
};

var script = Comp;function render(_ctx, _cache, $props, $setup, $data, $options) {
  return _cache[0] || (vue.setBlockTracking(-1), _cache[0] = vue.createElementVNode("div", {
    class: "datatable"
  }, [vue.createElementVNode("table", {
    class: vue.normalizeClass(_ctx.class)
  }, [vue.renderSlot(_ctx.$slots, "default")], 2)]), vue.setBlockTracking(1), _cache[0]);
}script.render = render;// Import vue component

// Default export is installable instance of component.
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),
var component = /*#__PURE__*/(function () {
  // Assign InstallableComponent type
  var installable = script; // Attach install function executed by Vue.use()

  installable.install = function (app) {
    app.component('Datatables.netVue', installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;
var namedExports=/*#__PURE__*/Object.freeze({__proto__:null,'default':component});// only expose one global var, with named exports exposed as properties of
// that global var (eg. plugin.namedExport)

Object.entries(namedExports).forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      exportName = _ref2[0],
      exported = _ref2[1];

  if (exportName !== 'default') component[exportName] = exported;
});module.exports=component;